// R√©cup√©rer les √©l√©ments HTML de la page
const chatbox = document.getElementById('chatbox');
const sendButton = document.getElementById('sendButton');
const userInput = document.getElementById('userInput');

// Cl√© API pour utiliser Gemini (√† remplacer par une vraie cl√©)
const apiKey = 'AIzaSyBxhKFy8MR9TSXz46Wso7uCX8QDlJQdODY';

// Message de bienvenue
addMessageToChatbox('Bot', 'Bonjour ! üîßJe suis un Pro de la M√©canique Automobile. Pose-moi tes questions üöó .');

// Fonction pour formater la r√©ponse du bot
function formatBotResponse(response) {
    return response
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Mettre en gras
        .replace(/\*(.*?)\*/g, '<em>$1</em>') // Mettre en italique
        .replace(/(\d+\.)\s/g, '<br>$1 ') // Ajouter des sauts de ligne pour les listes num√©rot√©es
        .replace(/(\*|\-)\s/g, '<br>‚Ä¢ ') // Ajouter des puces pour les listes
        .replace(/\n/g, '<br>'); // Remplacer les sauts de ligne par des balises <br>
}

// Fonction pour ajouter un message au chatbox
function addMessageToChatbox(sender, message) {
    const messageElement = document.createElement('div');
    messageElement.classList.add(sender === 'Vous' ? 'you' : 'bot'); // Ajoute la classe CSS
    const formattedMessage = formatBotResponse(message); // Formate TOUS les messages
    messageElement.innerHTML = `<strong>${sender}:</strong> ${formattedMessage}`; // Affiche le nom de l'exp√©diteur
    chatbox.appendChild(messageElement); // Ajoute le message √† la chatbox
    chatbox.scrollTop = chatbox.scrollHeight; // Fait d√©filer vers le bas
}

// Fonction pour envoyer un message
function sendMessage() {
    const userMessage = userInput.value.trim();
    if (!userMessage) return; // Ne rien faire si le message est vide

    // Effacer imm√©diatement le champ de saisie
    const messageToSend = userMessage;
    userInput.value = '';

    // Afficher le message de l'utilisateur
    addMessageToChatbox('Vous', messageToSend);

    // D√©sactiver le bouton d'envoi et le champ de saisie
    toggleInputs(true, 'Envoi en cours...');

    // Envoi du message √† l'API Gemini
    fetchGeminiResponse(messageToSend);
}

// Fonction pour g√©rer les r√©ponses diff√©r√©es
function handleDelayedResponse(response) {
    setTimeout(() => {
        addMessageToChatbox('Bot', response, true);
        toggleInputs(false);
    }, 1000); // Simuler un d√©lai de r√©ponse
}

// Fonction pour activer/d√©sactiver le bouton d'envoi et le champ de saisie
function toggleInputs(disabled, buttonText = 'Envoyer') {
    sendButton.disabled = disabled;
    sendButton.textContent = buttonText;
    userInput.disabled = disabled;

    if (!disabled) {
        userInput.focus(); // Remettre le focus sur le champ de saisie
    }
}
// √âv√©nements
sendButton.addEventListener('click', sendMessage);
userInput.addEventListener('keypress', function (e) {
    if (e.key === 'Enter') {
        sendMessage(); // Envoyer le message si l'utilisateur appuie sur Entr√©e
    }
});

// Fonction pour r√©cup√©rer la r√©ponse de l'API Gemini
function fetchGeminiResponse(userMessage) {
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

    const requestBody = {
        contents: [{
            parts: [
                { text: "Tu es un expert en m√©canique automobile. R√©ponds aux questions sur la m√©canique automobile, les pannes courantes, les conseils d'entretien,Propose les garage que tu connais et les bonnes pratiques.Si la question n'est pas li√©e √† la m√©canique, dis : 'Je suis sp√©cialis√© en m√©canique automobile. Pose-moi des questions sur les pannes, l'entretien, ou les r√©parations.'" },
                { text: userMessage }
            ]
        }]
    };

    fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
    })
        .then(response => response.json())
        .then(data => {
            const botResponse = data.candidates?.[0]?.content?.parts?.[0]?.text ||
                "D√©sol√©, je n'ai pas de r√©ponse √† cette question.";
            handleDelayedResponse(botResponse); // Afficher la r√©ponse du bot
        })
        .catch(error => {
            console.error('Erreur :', error);
            handleDelayedResponse('Le chatbot ne peut pas r√©pondre pour le moment.'); // G√©rer les erreurs
        });
}

